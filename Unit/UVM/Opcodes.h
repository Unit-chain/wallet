//
// Created by Kirill Zhukov on 02.06.2022.
//

#ifndef UVM_OPCODES_H
#define UVM_OPCODES_H

#include <cstdint>

typedef int64_t WORD;

constexpr WORD stop = 0b0000000000000000000000000000000000000000000000000000000000000000; // stop execution of the contract
constexpr WORD loop = 0b0000000000000000000000000000000000000000000000000000000000000001; // unavailable for any of operations
constexpr WORD swap = 0b0000000000000000000000000000000000000000000000000000000000000010; // swaps two references
constexpr WORD inc = 0b0000000000000000000000000000000000000000000000000000000000000011; // increase
constexpr WORD dec = 0b0000000000000000000000000000000000000000000000000000000000000100; // decrease
constexpr WORD sub = 0b0000000000000000000000000000000000000000000000000000000000000101; // subtract
constexpr WORD mul = 0b0000000000000000000000000000000000000000000000000000000000000110; // multiply
constexpr WORD i_div = 0b0000000000000000000000000000000000000000000000000000000000000111; // a % b
constexpr WORD i_xor = 0b0000000000000000000000000000000000000000000000000000000000001000; // a ^ b
constexpr WORD inv = 0b0000000000000000000000000000000000000000000000000000000000001001; // !a
constexpr WORD l_shift = 0b0000000000000000000000000000000000000000000000000000000000001010; // a << val
constexpr WORD r_shift = 0b0000000000000000000000000000000000000000000000000000000000001011; // a >> val
constexpr WORD pop = 0b0000000000000000000000000000000000000000000000000000000000001100; // pop value
constexpr WORD push = 0b0000000000000000000000000000000000000000000000000000000000001101; // push value
constexpr WORD dup = 0b0000000000000000000000000000000000000000000000000000000000001110; // duplicate (memcpy)
constexpr WORD i_or = 0b0000000000000000000000000000000000000000000000000000000000001111; // a || b
constexpr WORD i_and = 0b00000000000000000000000000000000000000000000000000000000000010000; // a && b
constexpr WORD i_return = 0b0000000000000000000000000000000000000000000000000000000000010001; // return;
constexpr WORD i_sha3 = 0b0000000000000000000000000000000000000000000000000000000000010010; // sha3_384
constexpr WORD i_balance = 0b0000000000000000000000000000000000000000000000000000000000010011; // get balance of address
constexpr WORD i_timestamp = 0b0000000000000000000000000000000000000000000000000000000000010011; // get timestamps
constexpr WORD i_blockhash = 0b0000000000000000000000000000000000000000000000000000000000010100; // get blockhash
constexpr WORD i_chainid = 0b0000000000000000000000000000000000000000000000000000000000010101; // returns chain_id
constexpr WORD i_memory_store = 0b0000000000000000000000000000000000000000000000000000000000010110; // in memory value
constexpr WORD i_storage_store = 0b0000000000000000000000000000000000000000000000000000000000010111; // stores key : value
constexpr WORD create = 0b0000000000000000000000000000000000000000000000000000000000011000; // create contract
constexpr WORD destruct = 0b0000000000000000000000000000000000000000000000000000000000011001; // destruct contract and returns all holdings to their holders
constexpr WORD jump = 0b0000000000000000000000000000000000000000000000000000000000011010; // jumps to instruction <num> in stack

constexpr WORD MAX_MEMORY = 65536;

#endif //UVM_OPCODES_H
